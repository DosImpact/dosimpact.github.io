"use strict";(self.webpackChunkdosimpact_blog=self.webpackChunkdosimpact_blog||[]).push([[7169],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,u=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=l(n),f=a,d=p["".concat(u,".").concat(f)]||p[f]||m[f]||s;return n?r.createElement(d,i(i({ref:t},c),{},{components:n})):r.createElement(d,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=f;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o[p]="string"==typeof e?e:a,i[1]=o;for(var l=2;l<s;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},78740:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const s={sidebar_position:11},i="Supabase Functions, Triggers",o={unversionedId:"g-fe/next+supa/next011",id:"g-fe/next+supa/next011",title:"Supabase Functions, Triggers",description:"Profile management",source:"@site/docs/g-fe/6-next+supa/next011.md",sourceDirName:"g-fe/6-next+supa",slug:"/g-fe/next+supa/next011",permalink:"/docs/g-fe/next+supa/next011",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/g-fe/6-next+supa/next011.md",tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11},sidebar:"frontEnd",previous:{title:"Supabase Auth DeepDive",permalink:"/docs/g-fe/next+supa/next010-4"},next:{title:"Testing",permalink:"/docs/category/testing"}},u={},l=[{value:"Profile management",id:"profile-management",level:2}],c={toc:l},p="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"supabase-functions-triggers"},"Supabase Functions, Triggers"),(0,a.kt)("h2",{id:"profile-management"},"Profile management"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"supabase\uc5d0\uc11c auth.users \ud14c\uc774\ube14\uc740 \uc9c1\uc811 \uc811\uadfc\uc774 \ubd88\uac00\ub2a5\ud558\ub2e4.  ",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"\uc815\uad50\ud558\uac8c \ub3cc\uc544\uac00\ub294 \uc0ac\uc6a9\uc790 \uc778\uc99d \uad00\ub9ac \uc2dc\uc2a4\ud15c\uc740 \ubcf4\ud638\ub418\uace0 \uc788\ub2e4.  "))),(0,a.kt)("li",{parentName:"ul"},"\uc0ac\uc6a9\uc790\uac00 \uac00\uc785\uc774 \ub418\ub294 \uc21c\uac04 profiles\uc774\ub77c\ub294 \ud14c\uc774\ube14\ub85c \ub370\uc774\ud130\ub4e4\uc744 \ubcf5\uc0ac\ud574\uc57c \ud55c\ub2e4.  ",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"\uc774\ub54c trigger, function\uc774 \uc0ac\uc6a9\ub41c\ub2e4.  "),(0,a.kt)("li",{parentName:"ul"},"\uc544\ub798 \uc608\uc2dc\uc5d0\uc11c",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"on_auth_user_created : after insert on auth.users \uc870\uac74\uc77c\ub54c \ud2b8\ub9ac\uac70  "),(0,a.kt)("li",{parentName:"ul"},"\ubb50\ub97c ?: handle_new_user \ub97c, \ud574\ub2f9 \ud568\uc218\uc5d0\uc11c\ub294 raw_user_meta_data\uc758 json\ub370\uc774\ud130\uc640 profile\uc758 \uceec\ub7fc\uc744 \ub9e4\ud551\ud558\uace0 \uc788\ub2e4.   ")))))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"-- Create a table for public profiles\ncreate table profiles (\n  id uuid references auth.users on delete cascade not null primary key,\n  updated_at timestamp with time zone,\n  username text unique,\n  full_name text,\n  avatar_url text,\n  website text,\n  email text,\n\n  constraint username_length check (char_length(username) >= 3)\n);\n-- Set up Row Level Security (RLS)\n-- See https://supabase.com/docs/guides/auth/row-level-security for more details.\nalter table profiles\n  enable row level security;\n\ncreate policy \"Public profiles are viewable by everyone.\" on profiles\n  for select using (true);\n\ncreate policy \"Users can insert their own profile.\" on profiles\n  for insert with check ((select auth.uid()) = id);\n\ncreate policy \"Users can update own profile.\" on profiles\n  for update using ((select auth.uid()) = id);\n\n-- This trigger automatically creates a profile entry when a new user signs up via Supabase Auth.\n-- See https://supabase.com/docs/guides/auth/managing-user-data#using-triggers for more details.\ncreate function public.handle_new_user()\nreturns trigger\nset search_path = ''\nas $$\nbegin\n  insert into public.profiles (id, full_name, avatar_url, website, email)\n  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url', NULL, new.raw_user_meta_data->>'email');\n  return new;\nend;\n$$ language plpgsql security definer;\n\ncreate trigger on_auth_user_created\n  after insert on auth.users\n  for each row execute procedure public.handle_new_user();\n\n-- Set up Storage!\ninsert into storage.buckets (id, name)\n  values ('avatars', 'avatars');\n\n-- Set up access controls for storage.\n-- See https://supabase.com/docs/guides/storage#policy-examples for more details.\ncreate policy \"Avatar images are publicly accessible.\" on storage.objects\n  for select using (bucket_id = 'avatars');\n\ncreate policy \"Anyone can upload an avatar.\" on storage.objects\n  for insert with check (bucket_id = 'avatars');\n\n")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"raw_user_meta_data\uc5d0\uc11c email \uceec\ub7fc \ucd94\uac00\ud574\uc57c \ud55c\ub2e4.",(0,a.kt)("br",{parentName:"em"})),"function, trigger \uc0ad\uc81c\uac00 \ud544\uc694\ud558\ub2e4\uba74 trigger \uba3c\uc800 \uc9c0\uc6cc\uc57c \ud55c\ub2e4.  "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;"))))}m.isMDXComponent=!0}}]);