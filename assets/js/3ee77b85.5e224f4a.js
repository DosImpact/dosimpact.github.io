"use strict";(self.webpackChunkdosimpact_blog=self.webpackChunkdosimpact_blog||[]).push([[4018],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,h=p["".concat(s,".").concat(m)]||p[m]||d[m]||i;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2358:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:10},o="Supabase DDL",l={unversionedId:"g-fe/next/next010-1",id:"g-fe/next/next010-1",title:"Supabase DDL",description:"- Supabase DDL",source:"@site/docs/g-fe/5-next/next010-1.md",sourceDirName:"g-fe/5-next",slug:"/g-fe/next/next010-1",permalink:"/docs/g-fe/next/next010-1",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/g-fe/5-next/next010-1.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"frontEnd",previous:{title:"Supabase install",permalink:"/docs/g-fe/next/next009"},next:{title:"Supabase DML",permalink:"/docs/g-fe/next/next010-2"}},s={},u=[{value:"Row Level Security - RLS",id:"row-level-security---rls",level:3},{value:"anonClient/adminClient + RLS",id:"anonclientadminclient--rls",level:3},{value:"middleware",id:"middleware",level:2},{value:"todos with RLS",id:"todos-with-rls",level:2},{value:"DDL with editor",id:"ddl-with-editor",level:3},{value:"\uc870\ud68c \uc815\ucc45",id:"\uc870\ud68c-\uc815\ucc45",level:4},{value:"Mutation \uc815\ucc45",id:"mutation-\uc815\ucc45",level:4},{value:"USING expression",id:"using-expression",level:3},{value:"WITH CHECK expression",id:"with-check-expression",level:3},{value:"\uc751\uc6a9, \uacf5\uac1c \uc124\uc815 \ucc98\ub9ac",id:"\uc751\uc6a9-\uacf5\uac1c-\uc124\uc815-\ucc98\ub9ac",level:3},{value:"todo from template",id:"todo-from-template",level:2},{value:"stripe",id:"stripe",level:2}],c={toc:u},p="wrapper";function d(e){let{components:t,...i}=e;return(0,r.kt)(p,(0,a.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"supabase-ddl"},"Supabase DDL"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#supabase-ddl"},"Supabase DDL"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#row-level-security---rls"},"Row Level Security - RLS")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#anonclientadminclient--rls"},"anonClient/adminClient + RLS")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#middleware"},"middleware")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#todos-with-rls"},"todos with RLS"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#ddl-with-editor"},"DDL with editor"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#%EC%A1%B0%ED%9A%8C-%EC%A0%95%EC%B1%85"},"\uc870\ud68c \uc815\ucc45")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#mutation-%EC%A0%95%EC%B1%85"},"Mutation \uc815\ucc45")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#using-expression"},"USING expression")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#with-check-expression"},"WITH CHECK expression")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#%EC%9D%91%EC%9A%A9-%EA%B3%B5%EA%B0%9C-%EC%84%A4%EC%A0%95-%EC%B2%98%EB%A6%AC"},"\uc751\uc6a9, \uacf5\uac1c \uc124\uc815 \ucc98\ub9ac")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#todo-from-template"},"todo from template")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#stripe"},"stripe"))))),(0,r.kt)("h3",{id:"row-level-security---rls"},"Row Level Security - RLS"),(0,r.kt)("p",null,"RLS\ub294 \ud14c\uc774\ube14 \ub2e8\uc704\ub85c \uc801\uc6a9\uc2dc\ud0ac \uc218 \uc788\ub2e4.  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"enable\uc744 \ud558\ub294\uac83\uc744 \uac15\ub825\ud558\uac8c \ucd94\ucc9c.  ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"RLS enalbe \ub418\uba74 RLS \uc815\ucc45\uc744 \ub9cc\ub4e4\uc5b4\uc57c \ud14c\uc774\ube14\uc744 \uc870\ud68c\ud560 \uc218 \uc788\ub2e4.  ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},'*"\ub204\uad6c\ub098 \uadf8 \ud14c\uc774\ube14\uc744 \uc77d\uc744 \uc218 \uc788\uc5b4 \ub77c\ub294 \uc815\ucc45"')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"authenticated : \uc778\uc99d\ub41c \uc0ac\uc6a9\uc790\ub9cc ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"anon : \ub204\uad6c\ub098  ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"service_role : \uc5b4\ub4dc\ubbfc "))),(0,r.kt)("h3",{id:"anonclientadminclient--rls"},"anonClient/adminClient + RLS"),(0,r.kt)("p",null,"INSERT - anon - true : anonClient\uc4f0\uae30 \uac00\ub2a5",(0,r.kt)("br",{parentName:"p"}),"\n","INSERT - authenticated - true : anonClient\uac00 \ub85c\uadf8\uc778 \ud574\uc57c \uc4f0\uae30 \uac00\ub2a5",(0,r.kt)("br",{parentName:"p"}),"\n","INSERT : adminClient\ub294 RLS \uc815\ucc45\uc5d0 \uc601\ud5a5\uc5c6\uc774 \uc4f0\uae30 \uac00\ub2a5   "),(0,r.kt)("p",null,"*service_role \uc65c \uc788\ub294\uac70\uc9c0..?!\n// INSERT - service_role - true : adminClient \uc4f0\uae30 \uac00\ub2a5  "),(0,r.kt)("h2",{id:"middleware"},"middleware"),(0,r.kt)("p",null,"\ubbf8\ub4e4\uc6e8\uc5b4  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ud2b9\uc815 \uacbd\ub85c\uc5d0 \ub300\ud574\uc11c \ubbf8\ub4e4\uc6e8\uc5b4\ub97c \ud1b5\uacfc\uc2dc\ud0ac \uc218 \uc788\ub2e4.  "),(0,r.kt)("li",{parentName:"ul"},"\uc608\ub97c\ub4e4\uc5b4 \ub85c\uadf8\uc778 \ub41c \uc0ac\uc6a9\uc790\ub9cc \ub4e4\uc5b4\uc62c \uc218 \uc788\ub294 \uacbd\ub85c, ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\ub85c\uadf8\uc778 \uc548\ub428, \ub85c\uadf8\uc778 \uc138\uc158 \ud480\ub9bc -> \ub2e4\uc2dc \ub85c\uadf8\uc778\ud558\ub77c\uace0 \ub85c\uadf8\uc778 \ud398\uc774\uc9c0\ub85c \ub9ac\ub2e4\uc774\ub809\ud2b8  ")))),(0,r.kt)("h2",{id:"todos-with-rls"},"todos with RLS"),(0,r.kt)("h3",{id:"ddl-with-editor"},"DDL with editor"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Alt text",src:n(5638).Z,width:"639",height:"471"})),(0,r.kt)("h4",{id:"\uc870\ud68c-\uc815\ucc45"},"\uc870\ud68c \uc815\ucc45"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'---\ub204\uad6c\ub098 \uc870\ud68c\uac00 \uac00\ub2a5\ud568  \nCREATE POLICY "Enable insert for authenticated users only" ON "public"."todos"\nAS PERMISSIVE FOR SELECT\nTO public  -- public | anon \\ authenticated\nUSING (true)\n\n-- \ub85c\uadf8\uc778 \ud55c \uc0ac\uc6a9\uc790\ub9cc \uc870\ud68c\uac00 \uac00\ub2a5\ud568.(\uc704 \uc870\uac74 \uc5c6\uc74c??)\nCREATE POLICY "Enable insert for authenticated users only" ON "public"."todos"\nAS PERMISSIVE FOR SELECT\nTO authenticated\nUSING (true)\n\n\n--\uc18c\uc720\uad8c\uc790\ub9cc \uc870\ud68c\uac00 \uac00\ub2a5\ud568  \nCREATE POLICY "Enable insert for users based on user_id" ON "public"."todos"\nAS PERMISSIVE FOR SELECT\nTO public\nUSING (auth.uid() = user_id)\n\n-- \ubb38\uc11c \n-- \ubcc0\ud658 \uc124\uba85 : https://supabase.com/docs/guides/auth/row-level-security#policies\ncreate policy "Individuals can view their own todos."\non todos for select\nusing ( auth.uid() = user_id );\n>>>.. \uc0ac\uc6a9\uc790\uac00 todos \ud14c\uc774\ube14\uc5d0\uc11c \uc120\ud0dd\uc744 \uc2dc\ub3c4\ud560 \ub54c\ub9c8\ub2e4 \ub2e4\uc74c\uacfc \uac19\uc774 \ubcc0\ud658\ub429\ub2c8\ub2e4.\nselect *\nfrom todos\nwhere auth.uid() = todos.user_id;\n-- Policy is implicitly added.\n\n-- \ubaa8\ub4e0 roles : https://supabase.com/docs/guides/database/postgres/roles#supabase-roles \n')),(0,r.kt)("h4",{id:"mutation-\uc815\ucc45"},"Mutation \uc815\ucc45"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"todo insert\ub294 \ub85c\uadf8\uc778 \ub41c \uc0ac\uc6a9\uc790\ub9cc \uac00\ub2a5\ud558\uac8c \ub9cc\ub4e4\uc790.  "),(0,r.kt)("li",{parentName:"ul"},"todo update\ub294 \ub9cc\ub4e0 \uc0ac\ub78c\ub9cc \uac00\ub2a5\ud558\uac8c \ud558\uc790.  "),(0,r.kt)("li",{parentName:"ul"},"todo delete\ub294 \ub9cc\ub4e0 \uc0ac\ub78c\ub9cc \uac00\ub2a5\ud558\uac8c \ub9cc\ub4e4\uc790.  ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'CREATE POLICY "Enable insert for authenticated users only" ON "public"."todos"\nAS PERMISSIVE FOR INSERT\nTO authenticated\nWITH CHECK (true) -- WITH CHECK expression\n\nCREATE POLICY "Enable delete for users based on user_id" ON "public"."todos"\nAS PERMISSIVE FOR UPDATE\nTO public\nUSING (auth.uid() = user_id)  -- USING expression\nWITH CHECK (auth.uid() = user_id) -- WITH CHECK expression\n\nCREATE POLICY "Enable delete for users based on user_id" ON "public"."todos"\nAS PERMISSIVE FOR DELETE\nTO public\nUSING (auth.uid() = user_id) -- \ub85c\uadf8\uc778\ud55c uid \ub791 \uc774 \ud14c\uc774\ube14\uc758 user_id\uac00 \uac19\uc740\uc9c0 \uccb4\ud06c\ud55c\ub2e4.  \n\n')),(0,r.kt)("h3",{id:"using-expression"},"USING expression"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"where \ucc98\ub7fc \uc0dd\uac01\ud558\uba74 \ub41c\ub2e4.  "),(0,r.kt)("li",{parentName:"ul"},"SELECT, UPDATE, DELETE \uc5f0\uc0b0\uc744 \ud558\uae30 \uc804\uc5d0 \ud574\ub2f9 Where \uc808\uc774 \uba3c\uc800 \uc2e4\ud589\ub41c\ub2e4\uace0 \uc0dd\uac01\ud558\uba74\ub41c\ub2e4.  "),(0,r.kt)("li",{parentName:"ul"},"\uc5b4\ub5a0\ud55c \uc791\uc5c5\uc744 \ud558\uae30 \uc804\uc5d0 \uc0ac\uc804\uc5d0 \uc2e4\ud589\ub418\ub294 \uac83\uc774\ub2e4.  ")),(0,r.kt)("p",null,"eg) SELECT\uc5d0 auth.uid() = user_id\uc744 \uac78\uba74   "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ub85c\uadf8\uc778 \ud55c \uc0ac\uc6a9\uc790\uc758 Row\ub9cc \ubcf4\uc778\ub2e4.  ")),(0,r.kt)("p",null,"\uc124\uba85  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\uc774 \uc2dd\uc740 \ud589 \uc218\uc900 \ubcf4\uc548\uc774 \ud65c\uc131\ud654\ub41c \uacbd\uc6b0 \ud14c\uc774\ube14\uc744 \ucc38\uc870\ud558\ub294 \ucffc\ub9ac\uc5d0 \ucd94\uac00\ub429\ub2c8\ub2e4."),(0,r.kt)("li",{parentName:"ul"},"\ud45c\ud604\uc2dd\uc774 true\ub97c \ubc18\ud658\ud558\ub294 \ud589\uc774 \ud45c\uc2dc\ub429\ub2c8\ub2e4. \uc2dd\uc774 false \ub610\ub294 null\uc744 \ubc18\ud658\ud558\ub294 \ubaa8\ub4e0 \ud589\uc740 \uc0ac\uc6a9\uc790\uc5d0\uac8c \ud45c\uc2dc\ub418\uc9c0 \uc54a\uc73c\uba70(SELECT\uc5d0\uc11c) \uc218\uc815\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4(UPDATE \ub610\ub294 DELETE\uc5d0\uc11c)."),(0,r.kt)("li",{parentName:"ul"},"\uc774\ub7ec\ud55c \ud589\uc740 \uc790\ub3d9\uc73c\ub85c \ud45c\uc2dc\ub418\uc9c0 \uc54a\uc73c\uba70 \uc624\ub958\uac00 \ubcf4\uace0\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.")),(0,r.kt)("h3",{id:"with-check-expression"},"WITH CHECK expression"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"INSERT, UPDATE \uc5f0\uc0b0\uc744 \ud558\uace0 \ub09c \ud6c4\uc5d0 \uccb4\ud06c\ud560 \ubd80\ubd84  ")),(0,r.kt)("p",null,"\uc124\uba85  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\uc774 \uc2dd\uc740 \ud589 \uc218\uc900 \ubcf4\uc548\uc774 \ud65c\uc131\ud654\ub41c \uacbd\uc6b0 \ud14c\uc774\ube14\uc5d0 \ub300\ud55c INSERT \ubc0f UPDATE \ucffc\ub9ac\uc5d0 \uc0ac\uc6a9\ub429\ub2c8\ub2e4."),(0,r.kt)("li",{parentName:"ul"},"\ud45c\ud604\uc2dd\uc774 true\ub85c \ud3c9\uac00\ub418\ub294 \ud589\ub9cc \ud5c8\uc6a9\ub429\ub2c8\ub2e4. \uc0bd\uc785\ub41c \ub808\ucf54\ub4dc\ub098 \uc5c5\ub370\uc774\ud2b8\ub85c \uc778\ud574 \uc0dd\uc131\ub41c \ub808\ucf54\ub4dc\uc5d0 \ub300\ud574 \ud45c\ud604\uc2dd\uc774 false \ub610\ub294 null\ub85c \ud3c9\uac00\ub418\uba74 \uc624\ub958\uac00 \ubc1c\uc0dd\ud569\ub2c8\ub2e4."),(0,r.kt)("li",{parentName:"ul"},"\uc774 \ud45c\ud604\uc2dd\uc740 \uc6d0\ub798 \ub0b4\uc6a9\uc774 \uc544\ub2cc \ud589\uc758 \uc81c\uc548\ub41c \uc0c8 \ub0b4\uc6a9\uc5d0 \ub300\ud574 \ud3c9\uac00\ub429\ub2c8\ub2e4.")),(0,r.kt)("h3",{id:"\uc751\uc6a9-\uacf5\uac1c-\uc124\uc815-\ucc98\ub9ac"},"\uc751\uc6a9, \uacf5\uac1c \uc124\uc815 \ucc98\ub9ac"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'--\uacf5\uac1c \uc124\uc815 \ucc98\ub9ac  \nCREATE POLICY "Enable select for users based on is_open ON "public"."todos"\nAS PERMISSIVE FOR SELECT\nTO public\nUSING (is_open)\n')),(0,r.kt)("h2",{id:"todo-from-template"},"todo from template"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Alt text",src:n(1502).Z,width:"1523",height:"300"})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'--\n-- For use with:\n-- https://github.com/supabase/supabase/tree/master/examples/todo-list/sveltejs-todo-list or\n-- https://github.com/supabase/examples-archive/tree/main/supabase-js-v1/todo-list\n--\n\ncreate table todos (\n  id bigint generated by default as identity primary key,\n  user_id uuid references auth.users not null,\n  task text check (char_length(task) > 3),\n  is_complete boolean default false,\n  inserted_at timestamp with time zone default timezone(\'utc\'::text, now()) not null\n);\n\n--  RLS \uc801\uc6a9\nalter table todos enable row level security;\n\ncreate policy "Individuals can create todos." on todos for\n    insert with check (auth.uid() = user_id);\n\ncreate policy "Individuals can view their own todos. " on todos for\n    select using (auth.uid() = user_id);\n\ncreate policy "Individuals can update their own todos." on todos for\n    update using (auth.uid() = user_id);\n\ncreate policy "Individuals can delete their own todos." on todos for\n    delete using (auth.uid() = user_id);\n\n')),(0,r.kt)("h2",{id:"stripe"},"stripe"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"/**\n* USERS\n* Note: This table contains user data. Users should only be able to view and update their own data.\n*/\ncreate table users (\n  -- UUID from auth.users\n  id uuid references auth.users not null primary key,\n  full_name text,\n  avatar_url text,\n  -- The customer's billing address, stored in JSON format.\n  billing_address jsonb,\n  -- Stores your customer's payment instruments.\n  payment_method jsonb\n);\nalter table users\n  enable row level security;\ncreate policy \"Can view own user data.\" on users\n  for select using (auth.uid() = id);\ncreate policy \"Can update own user data.\" on users\n  for update using (auth.uid() = id);\n\n/**\n* This trigger automatically creates a user entry when a new user signs up via Supabase Auth.\n*/\ncreate function public.handle_new_user()\nreturns trigger as\n$$\n  begin\n    insert into public.users (id, full_name, avatar_url)\n    values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');\n    return new;\n  end;\n$$\nlanguage plpgsql security definer;\n\ncreate trigger on_auth_user_created\n  after insert on auth.users\n  for each row\n    execute procedure public.handle_new_user();\n\n/**\n* CUSTOMERS\n* Note: this is a private table that contains a mapping of user IDs to Strip customer IDs.\n*/\ncreate table customers (\n  -- UUID from auth.users\n  id uuid references auth.users not null primary key,\n  -- The user's customer ID in Stripe. User must not be able to update this.\n  stripe_customer_id text\n);\nalter table customers enable row level security;\n-- No policies as this is a private table that the user must not have access to.\n\n/**\n* PRODUCTS\n* Note: products are created and managed in Stripe and synced to our DB via Stripe webhooks.\n*/\ncreate table products (\n  -- Product ID from Stripe, e.g. prod_1234.\n  id text primary key,\n  -- Whether the product is currently available for purchase.\n  active boolean,\n  -- The product's name, meant to be displayable to the customer. Whenever this product is sold via a subscription, name will show up on associated invoice line item descriptions.\n  name text,\n  -- The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.\n  description text,\n  -- A URL of the product image in Stripe, meant to be displayable to the customer.\n  image text,\n  -- Set of key-value pairs, used to store additional information about the object in a structured format.\n  metadata jsonb\n);\nalter table products\n  enable row level security;\ncreate policy \"Allow public read-only access.\" on products\n  for select using (true);\n\n/**\n* PRICES\n* Note: prices are created and managed in Stripe and synced to our DB via Stripe webhooks.\n*/\ncreate type pricing_type as enum ('one_time', 'recurring');\ncreate type pricing_plan_interval as enum ('day', 'week', 'month', 'year');\ncreate table prices (\n  -- Price ID from Stripe, e.g. price_1234.\n  id text primary key,\n  -- The ID of the prduct that this price belongs to.\n  product_id text references products,\n  -- Whether the price can be used for new purchases.\n  active boolean,\n  -- A brief description of the price.\n  description text,\n  -- The unit amount as a positive integer in the smallest currency unit (e.g., 100 cents for US$1.00 or 100 for \xa5100, a zero-decimal currency).\n  unit_amount bigint,\n  -- Three-letter ISO currency code, in lowercase.\n  currency text check (char_length(currency) = 3),\n  -- One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.\n  type pricing_type,\n  -- The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.\n  interval pricing_plan_interval,\n  -- The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.\n  interval_count integer,\n  -- Default number of trial days when subscribing a customer to this price using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan).\n  trial_period_days integer,\n  -- Set of key-value pairs, used to store additional information about the object in a structured format.\n  metadata jsonb\n);\nalter table prices\n  enable row level security;\ncreate policy \"Allow public read-only access.\" on prices\n  for select using (true);\n\n/**\n* SUBSCRIPTIONS\n* Note: subscriptions are created and managed in Stripe and synced to our DB via Stripe webhooks.\n*/\ncreate type subscription_status as enum ('trialing', 'active', 'canceled', 'incomplete', 'incomplete_expired', 'past_due', 'unpaid');\ncreate table subscriptions (\n  -- Subscription ID from Stripe, e.g. sub_1234.\n  id text primary key,\n  user_id uuid references auth.users not null,\n  -- The status of the subscription object, one of subscription_status type above.\n  status subscription_status,\n  -- Set of key-value pairs, used to store additional information about the object in a structured format.\n  metadata jsonb,\n  -- ID of the price that created this subscription.\n  price_id text references prices,\n  -- Quantity multiplied by the unit amount of the price creates the amount of the subscription. Can be used to charge multiple seats.\n  quantity integer,\n  -- If true the subscription has been canceled by the user and will be deleted at the end of the billing period.\n  cancel_at_period_end boolean,\n  -- Time at which the subscription was created.\n  created timestamp with time zone default timezone('utc'::text, now()) not null,\n  -- Start of the current period that the subscription has been invoiced for.\n  current_period_start timestamp with time zone default timezone('utc'::text, now()) not null,\n  -- End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.\n  current_period_end timestamp with time zone default timezone('utc'::text, now()) not null,\n  -- If the subscription has ended, the timestamp of the date the subscription ended.\n  ended_at timestamp with time zone default timezone('utc'::text, now()),\n  -- A date in the future at which the subscription will automatically get canceled.\n  cancel_at timestamp with time zone default timezone('utc'::text, now()),\n  -- If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with `cancel_at_period_end`, `canceled_at` will still reflect the date of the initial cancellation request, not the end of the subscription period when the subscription is automatically moved to a canceled state.\n  canceled_at timestamp with time zone default timezone('utc'::text, now()),\n  -- If the subscription has a trial, the beginning of that trial.\n  trial_start timestamp with time zone default timezone('utc'::text, now()),\n  -- If the subscription has a trial, the end of that trial.\n  trial_end timestamp with time zone default timezone('utc'::text, now())\n);\nalter table subscriptions\n  enable row level security;\ncreate policy \"Can only view own subs data.\" on subscriptions\n  for select using (auth.uid() = user_id);\n\n/**\n * REALTIME SUBSCRIPTIONS\n * Only allow realtime listening on public tables.\n */\ndrop publication if exists supabase_realtime;\ncreate publication supabase_realtime\n  for table products, prices;\n\n")))}d.isMDXComponent=!0},1502:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/image-3-bc11713ad177715f65bb00df752f5d14.png"},5638:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/image-4-bb75712d74abdcf639aaa7a5cc92e89c.png"}}]);