"use strict";(self.webpackChunkdosimpact_blog=self.webpackChunkdosimpact_blog||[]).push([[604],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=d(n),m=a,f=u["".concat(l,".").concat(m)]||u[m]||s[m]||o;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[u]="string"==typeof e?e:a,i[1]=c;for(var d=2;d<o;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1627:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>s,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:2},i="vectorbt - \uac00\uaca9\ub370\uc774\ud130 \uac00\uc838\uc624\uae30",c={unversionedId:"g-da/quant/quant002",id:"g-da/quant/quant002",title:"vectorbt - \uac00\uaca9\ub370\uc774\ud130 \uac00\uc838\uc624\uae30",description:"1\ubd84\ubd09",source:"@site/docs/g-da/quant/quant002.md",sourceDirName:"g-da/quant",slug:"/g-da/quant/quant002",permalink:"/docs/g-da/quant/quant002",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/g-da/quant/quant002.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"dataAnalytics",previous:{title:"vectorbt - \ubc31\ud14c\uc2a4\ud305 \ub77c\uc774\ube0c\ub7ec\ub9ac",permalink:"/docs/g-da/quant/quant001"},next:{title:"vectorbt - \uae30\ubcf8\uc608\uc81c",permalink:"/docs/g-da/quant/quant003"}},l={},d=[{value:"1\ubd84\ubd09",id:"1\ubd84\ubd09",level:2},{value:"ccxt.upbit",id:"ccxtupbit",level:3},{value:"vbt.CCXTData.download_symbol",id:"vbtccxtdatadownload_symbol",level:3},{value:"ccxt.upbit.hourly",id:"ccxtupbithourly",level:3}],p={toc:d},u="wrapper";function s(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"vectorbt---\uac00\uaca9\ub370\uc774\ud130-\uac00\uc838\uc624\uae30"},"vectorbt - \uac00\uaca9\ub370\uc774\ud130 \uac00\uc838\uc624\uae30"),(0,a.kt)("h2",{id:"1\ubd84\ubd09"},"1\ubd84\ubd09"),(0,a.kt)("p",null,"upbit "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://docs.upbit.com/reference/%EB%B6%84minute-%EC%BA%94%EB%93%A4-1"},"upbitAPI - \ubd84(Minute) \uce94\ub4e4"),". "),(0,a.kt)("li",{parentName:"ul"},"\uce94\ub4e4 200\uac1c \uae4c\uc9c0 \ud638\ucd9c \uac00\ub2a5  "),(0,a.kt)("li",{parentName:"ul"},"\ubd84 \ub2e8\uc704. \uac00\ub2a5\ud55c \uac12 : 1, 3, 5, 15, 10, 30, 60, 240")),(0,a.kt)("h3",{id:"ccxtupbit"},"ccxt.upbit"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"import numpy as np\nimport pandas as pd\nimport ccxt\nimport ta\nimport vectorbt as vbt\n\nexchange = ccxt.upbit()\ndata = exchange.fetch_ohlcv('BTC/USDT', '4h')\ndf = pd.DataFrame(data, columns = ['Time', 'Open', 'High', 'Low', 'Close', 'Volume'])\ndf['Time'] = pd.to_datetime(df['Time'], unit='ms') # ms(long) > datetime\ndf\n\n")),(0,a.kt)("h3",{id:"vbtccxtdatadownload_symbol"},"vbt.CCXTData.download_symbol"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"bulk download\uac00 \uac00\ub2a5\ud558\ub2e4. ")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"# download from\n# - exchage, timeframe, start ~ end\n# *delay, limit, retries ...\n\ndf = vbt.CCXTData.download_symbol(\n    \"BTC/USDT\",\n    exchange='upbit',\n    config=None,\n    timeframe='4h',\n    start='1 months ago',\n    end='now UTC',\n    delay=None,\n    limit=500,\n    retries=3,\n    show_progress=True,\n    params=None,\n    tqdm_kwargs=None\n)\n")),(0,a.kt)("h3",{id:"ccxtupbithourly"},"ccxt.upbit.hourly"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"import numpy as np\nimport pandas as pd\nimport ccxt\nfrom datetime import datetime, timedelta\nimport time\n\n\n\ndef getHourlyOHLCV(days=100, ticker='BTC/USDT'):\n  startSince = datetime.now() - timedelta(days)\n  dfOHLCV = pd.DataFrame(columns=['Time', 'Open', 'High', 'Low', 'Close', 'Volume'])\n  since = int(startSince.timestamp() * 1000)\n  prevSince = None\n\n  while True:\n      data = ccxt.upbit().fetch_ohlcv(ticker, '1h', since)\n      df = pd.DataFrame(data, columns=['Time', 'Open', 'High', 'Low', 'Close', 'Volume'])\n      df['Time'] = pd.to_datetime(df['Time'], unit='ms')  # ms(long) > datetime\n      \n      dfOHLCV = pd.concat([dfOHLCV, df], ignore_index=True)\n      since = int(dfOHLCV['Time'].iloc[-1].timestamp() * 1000) + 1 # +1ms for no dedup\n      \n      if since != None and prevSince == since:\n        break\n      \n      prevSince = since\n      time.sleep(0.1)\n  \n  dfOHLCV = dfOHLCV.drop_duplicates(subset=['Time']) # dedup\n  # dfOHLCV = dfOHLCV.set_index('Time').resample('1H').asfreq()\n  dfOHLCV = dfOHLCV.set_index('Time').resample('1H').ffill() # backfill prev data\n  return dfOHLCV\n  # return dfOHLCV \n\ndfOHLCV = getHourlyOHLCV()\ndfOHLCV\n")))}s.isMDXComponent=!0}}]);